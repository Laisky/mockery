// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/Laisky/testify/mock"

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

type Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *Interface) EXPECT() *Interface_Expecter {
	return &Interface_Expecter{mock: &_m.Mock}
}

// Hello provides a mock function with given fields: names
func (_m *Interface) Hello(names ...string) string {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(names...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Interface_Hello_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hello'
type Interface_Hello_Call struct {
	*mock.Call
}

// Hello is a helper method to define mock.On call
//   - names ...string
func (_e *Interface_Expecter) Hello(names ...interface{}) *Interface_Hello_Call {
	return &Interface_Hello_Call{Call: _e.mock.On("Hello",
		append([]interface{}{}, names...)...)}
}

func (_c *Interface_Hello_Call) Run(run func(names ...string)) *Interface_Hello_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Interface_Hello_Call) Return(_a0 string) *Interface_Hello_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInterface(t mockConstructorTestingTNewInterface) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
